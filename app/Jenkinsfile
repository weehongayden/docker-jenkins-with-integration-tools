pipeline {
  agent any

  tools {
    maven 'Maven'
    jdk 'JDK'
  }
  
  stages {
    stage('Build') {
      steps {
        sh 'mvn clean package'
      }
    }

    stage('Test') {
      steps {
        sh 'mvn test'
      }
    }

    stage('SonarQube Analysis') {
      steps {
        script {
          withCredentials([
            [
              $class: "VaultTokenCredentialBinding",
              credentialsId: "vault-token",
              vaultAddr: "https://vault.weehong.dev"
            ]
          ]) {

            def secrets = [
              [
                path: "secret/sonar",
                engineVersion: 2,
                secretValues: [
                  [
                    envVar: "sonar_project_key", vaultKey: "projectKey",
                  ],
                  [
                    envVar: "sonar_project_name", vaultKey: "projectName",
                  ],
                  [
                    envVar: "sonar_url", vaultKey: "url",
                  ],
                  [
                    envVar: "sonar_token", vaultKey: "token",
                  ]
                ]
              ]
            ]

            def configuration = [
              vaultUrl: VAULT_ADDR,
              vaultCredentialId: "jenkins_approle",
              engineVersion: 1
            ]

            withVault([configuration: configuration, vaultSecrets: secrets]) {
                withSonarQubeEnv('Sonar') {
                    sh "mvn clean verify sonar:sonar \
                            -Dsonar.projectKey='$env.sonar_project_key' \
                            -Dsonar.projectName='$env.sonar_project_name' \
                            -Dsonar.host.url='$env.sonar_url' \
                            -Dsonar.token='sqp_ecaf9de9629413296f2ea87f4900ca80158fba24'"
                }
            }
          }
        }
      }
    }

    stage("Quality Gate") {
      steps {
            sleep 300
            timeout(time: 5, unit: 'MINUTES') {
                waitForQualityGate abortPipeline: true
            }
        }
    }
  }
}